import os
import re
from PIL import Image

# This function searches for screenshots on the desktop, filters them based on a naming pattern, 
# and then sorts them by the timestamp in the filename.
# All comments are generated by ChatGPT.

def find_screenshots_on_desktop():
    # Get the path to the user's desktop directory.
    desktop_path = os.path.expanduser('~/Desktop')
    
    # List all files on the desktop.
    files = os.listdir(desktop_path)
    
    # Filter the files to get only the screenshots matching the specific naming pattern.
    screenshots = [os.path.join(desktop_path, f) for f in files if is_screenshot_name(f)]
    
    # Sort the screenshots based on the extracted time from the filename.
    screenshots.sort(key=lambda f: extract_time_from_filename(os.path.basename(f)))
    
    return screenshots

# This function extracts the timestamp from a screenshot filename using regex.
def extract_time_from_filename(filename):
    # Regular expression pattern to find the time (e.g., "11.24.10") in the filename.
    match = re.search(r'at (\d{2}\.\d{2}\.\d{2})\.png$', filename)
    
    # If a match is found, return the matched timestamp. Otherwise, return an empty string.
    if match:
        return match.group(1)
    return ""

# This function checks if a given filename follows the screenshot naming pattern for the date "2023-10-31".
def is_screenshot_name(filename):
    return filename.startswith("Screenshot 2023-10-31") and filename.endswith(".png")

# This function combines a list of image filenames into a single PDF.
def combine_images_to_pdf(filenames, output_filename):
    # Open the first image.
    with Image.open(filenames[0]) as im:
        # Create a list of additional images to be appended to the PDF.
        im_list = [Image.open(f) for f in filenames[1:]]
        
        # Save all images in the list as a single PDF.
        im.save(output_filename, "PDF", resolution=100.0, save_all=True, append_images=im_list)

# This function combines screenshots found on the desktop into a single PDF, if they exist.
def combine_screenshots():
    # Find and sort screenshots on the desktop.
    screenshots = find_screenshots_on_desktop()
    
    # If any matching screenshots are found, combine them. Otherwise, print an error message.
    if screenshots:
        combine_images_to_pdf(screenshots, os.path.expanduser('~/Desktop/combined.pdf'))
        print("Success: Screenshots combined into combined.pdf on your Desktop!")
    else:
        print("No screenshots found with the specified naming pattern.")

# Execute the main function to combine screenshots.
combine_screenshots()
